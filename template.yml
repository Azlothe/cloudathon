AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Stack for AnyCompany

Parameters:
  AppName:
    Type: String
    Description: Name for the app
  DeploymentEnvironment:
    Type: String
    Description: Deployment environment
  # SubnetIds:
  #   Type: List<AWS::EC2::Subnet::Id>
  #   Description: Select the subnets to associate with the VPC endpoint
  # SecurityGroupId:
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: Select security group to associate with the VPC endpoint.
  ImageTag:
    Description: tag name for image
    Type: String
    Default: latest
  ECRUri:
    Type: String
    Description: Name of the ECR repository

Resources:
  # ~~~~~~~~~~ BEGIN DynamoDB Resources ~~~~~~~~~~~~~~~

  ExampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AppName}-example-table
      AttributeDefinitions:
        - AttributeName: item_id
          AttributeType: S
      KeySchema:
        - AttributeName: item_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      
  # ~~~~~~~~~~ END DynamoDB Resources ~~~~~~~~~~~~~~~

  # ~~~~~~~~~~ BEGIN OLAP Resources ~~~~~~~~~~~~~~~

  # OpenSearchDomain:
  #   Type: AWS::OpenSearchService::Domain
  #   Properties:
  #     DomainName: !Sub ${AppName}-osearch
  #     NodeToNodeEncryptionOptions:
  #       Enabled: true
  #     EBSOptions:
  #       EBSEnabled: true
  #       VolumeSize: 20  # Size in GB
  #       VolumeType: gp2
  #     EncryptionAtRestOptions:
  #       Enabled: true
  #     AccessPolicies:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal: "*"
  #           Action: "es:ESHttpPut"
  #           Resource: arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AppName}-opensearch/*  # OpenSearch write permissions

  # ~~~~~~~~~~ END OLAP Resources ~~~~~~~~~~~~~~~

  # ~~~~~~~~~~ BEGIN Lambda Resources ~~~~~~~~~~~~~

  DynamoDBToOpenSearchLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppName}-stream-processor
      CodeUri: src/stream-processor/handlers/
      Handler: processor.handler
      Timeout: 300
      MemorySize: 256
      Runtime: python3.12
      Policies:
        - AdministratorAccess
        # - PolicyName: "DynamoDBToOpenSearchPolicy"
        #   PolicyDocument:
        #     Version: "2012-10-17"
        #     Statement:
        #       # Allow Lambda to interact with DynamoDB Streams
        #       - Effect: "Allow"
        #         Action:
        #           - "dynamodb:DescribeStream"
        #           - "dynamodb:GetRecords"
        #           - "dynamodb:GetShardIterator"
        #           - "dynamodb:ListStreams"
        #         Resource: !GetAtt ExampleTable.StreamArn

        #       # Allow Lambda to write to OpenSearch
        #       - Effect: "Allow"
        #         Action: "es:ESHttpPut"
        #         Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AppName}-opensearch-domain/*
      Environment:
        Variables:
          OPENSEARCH_DOMAIN: "anycompany-dev-1-opensearch"
      Events:
        DynamoDBStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ExampleTable.StreamArn  # Connects the DynamoDB stream to Lambda
            StartingPosition: LATEST

  # DynamoDBToOpenSearchLambdaRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Service: "lambda.amazonaws.com"
  #           Action: "sts:AssumeRole"
  #     Policies:
  #       - PolicyName: "DynamoDBStreamToOpenSearchPolicy"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             # Allow Lambda to read from DynamoDB Streams
  #             - Effect: "Allow"
  #               Action: "dynamodb:DescribeStream"
  #               Resource: !GetAtt ExampleTable.StreamArn
  #             - Effect: "Allow"
  #               Action: "dynamodb:GetRecords"
  #               Resource: !GetAtt ExampleTable.StreamArn
  #             - Effect: "Allow"
  #               Action: "dynamodb:GetShardIterator"
  #               Resource: !GetAtt ExampleTable.StreamArn
  #             - Effect: "Allow"
  #               Action: "dynamodb:ListStreams"
  #               Resource: !GetAtt ExampleTable.StreamArn
                
  #             # Allow Lambda to write to OpenSearch
  #             - Effect: "Allow"
  #               Action: "es:ESHttpPut"
  #               Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AppName}-opensearch/*
              
  #             # Optional: CloudWatch Logs permissions (for logging Lambda execution)
  #             - Effect: "Allow"
  #               Action: "logs:*"
  #               Resource: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AppName}-stream-processor:*

  # ~~~~~~~~~~ END Lambda Resources ~~~~~~~~~~~~

  # ~~~~~~~~~~ BEGIN S3 Resources ~~~~~~~~~~~~~~~

  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub ${AppName}-artifacts

  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt MyCloudFrontOAI.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "${MyBucket.Arn}/*"


  MyCloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access Identity for ${AppName} CloudFront


  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt MyBucket.RegionalDomainName
            Id: myS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${MyCloudFrontOAI}"
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: myS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2


# ~~~~~~~~~~ END DynamoDB Resources ~~~~~~~~~~~~~~~

  # ~~~~~~~~~~ BEGIN Fargate Resources ~~~~~~~~~~~~~~~

  VPC:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./vpc.yml

  Cluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders: 
        - FARGATE
  
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "hello-world"
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds: 5
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!GetAtt "VPC.Outputs.PublicSubnet1", !GetAtt VPC.Outputs.PublicSubnet2]
          SecurityGroups: [!GetAtt VPC.Outputs.SG]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: "hello-world"
          ContainerPort: 3000
          TargetGroupArn: !GetAtt VPC.Outputs.LB

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: HelloWorld
      Cpu: 1024
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: hello-world
          Cpu: 1024
          Memory: 8192
          Image: !Sub ${ECRUri}:${ImageTag}
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: containerlog
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /${AppName}/fargatelogs

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
      Path: /
  
  # ~~~~~~~~~~ END Fargate Resources ~~~~~~~~~~~~~~~

Outputs:
  BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref MyBucket

  CloudFrontURL:
    Description: "CloudFront Distribution URL"
    Value: !Sub "https://${MyCloudFrontDistribution.DomainName}"

  ClusterName:
    Description: Amazon ECS Cluster Name
    Value: !Ref Cluster
  ServiceName:
    Description: Amazon ECS Service Name
    Value: !GetAtt Service.Name
  FQDN:
    Description: URL for your application
    Value: !GetAtt VPC.Outputs.PublicLBFQDN